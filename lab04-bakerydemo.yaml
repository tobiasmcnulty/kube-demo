# This section is commented out, so you don't accidentally over-write your Secret
# from the previous lab with this bogus data. Feel free to uncomment it and include
# your PASSWORD and USER_NAME
# apiVersion: v1
# kind: Secret
# metadata:
#   name: bakerydemo-secrets
#   labels:
#     app: bakerydemo
# type: Opaque
# stringData:
#   DATABASE_URL: "postgres://demo:PASSWORD@10.63.96.3/DATABASE_NAME"
#   DJANGO_SECRET_KEY: "a-long-and-random-string"
#   # DJANGO_LOAD_INITIAL_DATA: "on"
#   # When using Jinja2 with Ansible (or another deployment tool), you could pull in
#   # vault-encrypted variables, like so:
#   # DJANGO_SECRET_KEY: "{{ DJANGO_SECRET_KEY }}"
# ---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: bakerydemo
spec:
  # Attempt to keep a single instance of this Pod running at all times
  replicas: 1
  template:
    # This is the Pod definition!
    metadata:
      labels:
        app: bakerydemo
    spec:
      containers:
      - name: bakerydemo
        # The user, repository, and tag of the image we're deploying
        image: wagtail/bakerydemo:latest
        # On which port(s) does this container listen?
        ports:
        - containerPort: 8000
        # Kubernetes boilerplate (how to lookup Pod hostnames):
        env:
        - name: GET_HOSTS_FROM
          value: dns
        envFrom:
        - secretRef:
            name: bakerydemo-secrets
---
# A Service makes our Pod(s) accessible with a static, private IP from WITHIN the cluster
apiVersion: v1
kind: Service
metadata:
  name: bakerydemo
  labels:
    app: bakerydemo
spec:
  # All pods with the 'app: bakerydemo' label are included in this Service!
  selector:
    app: bakerydemo
  ports:
  # Map port 80 to port 8000 on the Pod
  - protocol: TCP
    port: 80
    targetPort: 8000
---
# An Ingress exposes our service to the outside world with a domain. Note,
# this assumes the cluster as the Nginx Ingress Controller and a cert-manager
# ClusterIssuer called "letsencrypt-production" already configured (Tech
# Support will do that for you at Caktus).
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: bakerydemo
  annotations:
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/cluster-issuer: "letsencrypt-production"
spec:
  tls:
  - hosts:
    - YOUR_USER_NAME.kubedemo.caktus-built.com
    secretName: bakerydemo-tls
  rules:
  - host: YOUR_USER_NAME.kubedemo.caktus-built.com
    http:
      paths:
      - path: /
        backend:
          serviceName: bakerydemo
          servicePort: 80
